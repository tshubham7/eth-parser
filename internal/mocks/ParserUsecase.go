// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/tshubham7/eth-parser/internal/pkg/model"
)

// ParserUsecase is an autogenerated mock type for the ParserUsecase type
type ParserUsecase struct {
	mock.Mock
}

// GetAllTransactions provides a mock function with given fields: ctx
func (_m *ParserUsecase) GetAllTransactions(ctx context.Context) ([]model.Transaction, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTransactions")
	}

	var r0 []model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Transaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentBlockNumber provides a mock function with given fields: ctx
func (_m *ParserUsecase) GetCurrentBlockNumber(ctx context.Context) (model.Block, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentBlockNumber")
	}

	var r0 model.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (model.Block, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) model.Block); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(model.Block)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactions provides a mock function with given fields: ctx, address
func (_m *ParserUsecase) GetTransactions(ctx context.Context, address string) ([]model.Transaction, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.Transaction, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Transaction); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Process provides a mock function with given fields: ctx, closeCh
func (_m *ParserUsecase) Process(ctx context.Context, closeCh <-chan struct{}) {
	_m.Called(ctx, closeCh)
}

// Subscribe provides a mock function with given fields: ctx, address
func (_m *ParserUsecase) Subscribe(ctx context.Context, address string) error {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewParserUsecase creates a new instance of ParserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ParserUsecase {
	mock := &ParserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
