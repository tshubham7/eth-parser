// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/tshubham7/eth-parser/internal/pkg/model"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// AddAddress provides a mock function with given fields: address
func (_m *Store) AddAddress(address string) error {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for AddAddress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTransaction provides a mock function with given fields: tx
func (_m *Store) AddTransaction(tx model.Transaction) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for AddTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Transaction) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTransactions provides a mock function with given fields:
func (_m *Store) GetAllTransactions() ([]model.Transaction, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTransactions")
	}

	var r0 []model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Transaction, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentBlock provides a mock function with given fields:
func (_m *Store) GetCurrentBlock() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentBlock")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactions provides a mock function with given fields: address
func (_m *Store) GetTransactions(address string) ([]model.Transaction, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.Transaction, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(string) []model.Transaction); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAddressSubscribed provides a mock function with given fields: address
func (_m *Store) IsAddressSubscribed(address string) (bool, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for IsAddressSubscribed")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCurrentBlock provides a mock function with given fields: block
func (_m *Store) UpdateCurrentBlock(block int) error {
	ret := _m.Called(block)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCurrentBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
